"""
Django settings for Schedulo_app project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values# Fallback/default "from"
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "Schedulo <no-reply@yourdomain.com>")

# Remove duplicate section - using the configuration at the top of the filesee
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-c5y6#lddyv&p*@@hu+qvwi%$%h6c8*u=kmv9q*l0iwcvpkrnzd'
SECRET_KEY = os.environ["SECRET_KEY"] 


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

DEBUG = os.environ.get("DEBUG", "0") == "1"

# Allow your custom domain (and keep the Render URL if you still use it)
ALLOWED_HOSTS = [
    "localhost", "127.0.0.1",
    ".onrender.com",
    "schedulo-dmib.onrender.com",
    "portal.delaala.co.uk",          # <-- add this
]

# If you're reading from an env var instead, do:
# ALLOWED_HOSTS = [h.strip() for h in os.getenv("ALLOWED_HOSTS", "").split(",") if h.strip()]

# CSRF (must include scheme)
CSRF_TRUSTED_ORIGINS = [
    "https://*.onrender.com",
    "https://schedulo-dmib.onrender.com",
    "https://portal.delaala.co.uk",  # <-- add this
]

# Behind Render's proxy (helps with HTTPS and redirects)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True

# Delaala Company Limited domain lock settings
DELAALA_ORG_NAME = "Delaala Company Limited"
DELAALA_DOMAIN = "portal.delaala.co.uk"



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'shifts',
    'notifications',
    "widget_tweaks",
    'core'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",

    # 🔽 Delaala domain lock (must be after auth middleware)
    "core.middleware.DelaalaDomainOrgLockMiddleware",

    # 🔽 derive tenant from host/subdomain/db router/etc.
    "core.multitenancy.TenantMiddleware",

    # 🔽 fallback: from session or user's profile; also writes session key
    "core.middleware.CurrentOrgMiddleware",

    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "accounts.middleware.NoStoreForAuthPages",
]


ROOT_URLCONF = 'Schedulo_app.urls'

BASE_DIR = Path(__file__).resolve().parent.parent
USE_SQLITE = os.environ.get("USE_SQLITE", "0") == "1"  # only for local dev

if USE_SQLITE:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Fail loudly if DATABASE_URL is missing in prod
    DATABASES = {
        "default": dj_database_url.config(
            env="DATABASE_URL",              # must exist on Render
            conn_max_age=600,
            ssl_require=True,
        )
    }
    if not DATABASES["default"]:
        raise RuntimeError("DATABASE_URL is not set")

# BASE_DIR = Path(__file__).resolve().parent.parent


# SECRET_KEY = os.environ.get("SECRET_KEY", "dev-only-secret")
# DEBUG = os.environ.get("DEBUG", "False") == "True"
# ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".onrender.com"]

# # DATABASES: use Render's DATABASE_URL if present; else SQLite
# if os.environ.get("DATABASE_URL"):
#     DATABASES = {
#         "default": dj_database_url.config(
#             conn_max_age=600,
#             ssl_require=True,
#         )
#     }
# else:
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.sqlite3",
#             "NAME": BASE_DIR / "db.sqlite3",
#         }
#     }


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Schedulo_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Schedulo',
#         'USER': 'postgres',
#         'PASSWORD': 'Metrotv111l2@',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Remove duplicated database configs - using the environment-based configuration above


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'login'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

TIME_ZONE = 'Europe/London'  # Set your preferred timezone
USE_TZ = True  # Use timezone-aware datetimes

EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND",
    "django.core.mail.backends.smtp.EmailBackend"  # prod default
)

EMAIL_HOST = os.getenv("EMAIL_HOST", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "False") == "True"

# Fallback/default “from”
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "Schedulo <no-reply@yourdomain.com>")

# settings.py
# ALLOWED_HOSTS = [
#     "localhost",
#     "127.0.0.1",
#     ".onrender.com",            # wildcard for any *.onrender.com app
#     "schedulo-dmib.onrender.com"  # your exact hostname (belt & braces)
# ]

# Django 4+ + HTTPS behind a proxy (Render):
CSRF_TRUSTED_ORIGINS = [
    "https://*.onrender.com",
    "https://schedulo-dmib.onrender.com",
]

# Ensure Django knows the original scheme when behind Render’s proxy
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django-error.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
